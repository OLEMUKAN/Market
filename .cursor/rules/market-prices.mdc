---
description: when you want to refresh your knowledge abuot the project
globs: 
alwaysApply: false
---


AgriMarket Uganda – Project Documentation



1. Introduction and Project Vision

1.1. Overview
AgriMarket Uganda is a mobile application designed to empower stakeholders in Uganda's agricultural sector – primarily smallholder farmers, traders, and agricultural extension officers – by providing them with timely and transparent access to agricultural commodity prices. Leveraging modern Android development practices and robust backend services from Firebase, this Minimum Viable Product (MVP) aims to address critical information asymmetry in the agricultural market.

1.2. Problem Statement
In Uganda, a significant challenge for agricultural stakeholders, especially smallholder farmers, is the lack of access to reliable, real-time market price information. This information gap often leads to:

Poor Decision-Making: Farmers may sell produce at suboptimal prices or times.

Price Exploitation: Intermediaries may take advantage of farmers' lack of knowledge.

Reduced Profitability: Ultimately impacting the livelihoods of farmers and the efficiency of the agricultural value chain.

Market Inefficiencies: Hindering fair trade and competitive market practices.

AgriMarket Uganda seeks to mitigate these issues by delivering structured, up-to-date commodity price data directly to users' mobile devices.

1.3. Project Goals & Objectives (MVP)
The primary goal of this MVP is to develop a functional Android prototype that demonstrates the core value proposition:

Enable Price Discovery: Allow users to view current Farm Gate Prices (FGP) and Market Prices (MP) for selected agricultural commodities.

Geographical Relevance: Provide price data across key Ugandan districts (initially 7 districts).

Secure Access: Implement user authentication to ensure data is accessed by registered users.

Real-time Data: Fetch and display price information dynamically from a backend database (Firebase Firestore).

Demonstrate Technical Proficiency: Showcase best practices in Android development including Jetpack Compose, MVVM architecture, ViewModel for state management, and Firebase integration.

2. Target Audience & Use Cases

2.1. Target Users

Smallholder Farmers: To make informed decisions on when, where, and at what price to sell their produce.

Market Traders: To understand price variations across districts and identify trading opportunities.

Agricultural Extension Officers: To advise farmers based on current market trends and support better farming practices.

2.2. Primary Use Case: Accessing Real-Time Commodity Prices

Actor: Farmer, Trader, or Extension Officer.

Precondition: User has an Android device with internet connectivity and has installed the AgriMarket Uganda app.

Trigger: User needs to check the current prices for specific agricultural commodities.

Main Success Scenario:

User launches the AgriMarket Uganda app.

User is presented with a Login Screen.

User enters their email and password and taps "Login."

System authenticates the user via Firebase Authentication.

Upon successful login, the user is navigated to the Home Screen.

The Home Screen displays a list of agricultural commodities (e.g., Beans, Maize, Matooke) with their respective images and an average market price.

User scrolls through the list and taps on a specific commodity (e.g., "Beans (Kg) Nambale").

User is navigated to the Detail Screen for "Beans (Kg) Nambale."

The Detail Screen displays a table or grid showing:

District Name

Farm Gate Price (FGP) in that district

Market Price (MP) in that district
(for all 7 target districts: Kampala, Arua, Gulu, Mbale, Kabale, Jinja, Mubende).

User reviews the prices and makes informed decisions.

Alternative Flows/Error Handling:

Invalid Login: If login fails, an error message is displayed.

No Internet: An appropriate message is shown if data cannot be fetched.

Data Not Found: If a specific commodity detail is unavailable (unlikely in MVP if data is pre-populated), a message is shown.

3. Scope of the MVP

3.1. In Scope

Commodities & Districts: Coverage of 21 distinct commodities and 7 Ugandan districts.

Price Data Fields: Focus on Farm Gate Price (FGP) and Market Price (MP) only.

Authentication: Simple email/password login via Firebase Authentication.

Core UI Screens: Login Screen, Home Screen (Commodity List), Detail Screen (Price Breakdown).

Technology Stack: Kotlin, Jetpack Compose, ViewModel, MVVM, Firebase (Auth & Firestore).

Basic Visual Design: Custom launcher icon, Material Theming, Google Fonts, rounded UI components.

Basic Interactivity: Animated transitions, touchable feedback.

Technical Standards: No hardcoded strings (use strings.xml), use dimens.xml.

3.2. Out of Scope for MVP

Full-scale admin dashboard for data management (data assumed to be managed via Firebase Console or scripts).

Offline access or data caching.

SMS alerts or notifications.

Multiple user roles (e.g., Admin, Premium User).

User registration/sign-up screen (users assumed to be pre-registered or login handles first-time use implicitly via Firebase).

User profile management.

Historical price tracking or charting.

Multi-language support/localization.

Advanced search or filtering capabilities.

Social sharing features.

4. Core Functionalities & Features

4.1. User Authentication & Authorization

Firebase Email/Password Login:

Functionality: Allows users to securely log into the application using their registered email and password.

Mechanism: Integrates with Firebase Authentication service.

User Experience: Dedicated Login Screen with fields for email and password, and a "Login" button.

Form Validation:

Functionality: Provides basic client-side validation for login inputs (e.g., non-empty fields, potentially basic email format check).

User Experience: Inline error messages or highlights for invalid inputs.

Session Management:

Functionality: Once logged in, the user remains authenticated until they explicitly log out (logout functionality is out of MVP scope but session persistence is implied).

Mechanism: Firebase SDK handles session tokens.

Authorized Data Access:

Functionality: Ensures that only authenticated users can access the commodity price information.

Mechanism: Firestore security rules restrict read access to authenticated users.

4.2. Commodity Price Information Display

Home Screen - Commodity Listing:

Functionality: Presents a scrollable list of available agricultural commodities.

Data Displayed per Item:

Commodity Image: Visual representation.

Commodity Name: e.g., "Maize grain (kg)".

Average Market Price: A calculated average of Market Prices across all tracked districts for that commodity, providing a quick overview.

Mechanism: Data fetched from the commodities collection in Firebase Firestore and displayed using a LazyColumn in Jetpack Compose.

Detail Screen - Price Breakdown:

Functionality: Provides a detailed view of prices for a selected commodity across various districts.

Data Displayed:

Commodity Name (as a title/header).

A table or grid format showing:

District Name

Farm Gate Price (FGP) for that district.

Market Price (MP) for that district.

Mechanism: Navigates from the Home Screen, passing the commodity ID. Fetches specific commodity data from Firestore or uses data passed from the Home Screen.

4.3. Navigation

Multi-Screen Navigation:

Functionality: Enables users to move between different sections of the app (Login -> Home -> Detail -> Home).

Mechanism: Implemented using Navigation Compose library.

Contextual Back Navigation:

Functionality: Allows users to return to the previous screen (e.g., from Detail Screen back to Home Screen).

Mechanism: AppBar back arrow and system back button.

4.4. User Interface (UI) and User Experience (UX)

Visual Design & Theming:

Custom Launcher Icon: Brand identity for the app.

Material Theme: Consistent application of primary, secondary, and background colors as defined.

Google Fonts Integration: Enhances typography and readability.

Rounded UI Components: Modern aesthetic for Cards, Buttons, Images.

Unified Style: Cohesive visual language across all screens and components.

UI Components:

LazyColumn: Efficiently displays the scrollable list of commodities.

Card: Used for individual commodity items in the list and potentially for structuring content on the Detail Screen.

TextField: For email and password input on the Login Screen.

Button: For login action.

Interactivity & Animations:

Animated Transitions: Smooth visual cues during screen navigation (e.g., fade in/out).

Touchable Feedback: Ripple effects on buttons and list items to confirm user interaction.

Responsiveness:

Configuration Change Handling: The app UI adapts to screen rotations without losing state (managed by ViewModel).

4.5. Data Management (Backend Interaction)

Firebase Firestore for Data Storage:

Functionality: Serves as the central database for storing and retrieving commodity names, image URLs, and district-specific FGP/MP.

Structure: commodities collection, with each document representing a commodity and containing a prices map for district-level data.

Real-time Data Fetching:

Functionality: The app fetches data from Firestore, aiming to display the most current information available in the database.

Mechanism: Firestore listeners or one-time fetches initiated by ViewModels.

5. Technical Architecture

5.1. Overview
The application follows the Model-View-ViewModel (MVVM) architectural pattern, promoting separation of concerns, testability, and maintainability.

+-------------------------+
        |         UI Layer        |  (Jetpack Compose: Screens, Components)
        |  - Renders UI          |
        |  - Observes ViewModel  |
        +-----------+-------------+
                    | (User Interactions, State Updates)
        +-----------v-------------+
        |      ViewModel          |  (AndroidX ViewModel: HomeViewModel, DetailViewModel, AuthViewModel)
        |  - Holds UI State      |
        |  - Exposes Data (Flows)|
        |  - Handles User Logic  |
        |  - Calls Repository    |
        +-----------+-------------+
                    | (Requests Data)
        +-----------v-------------+
        |     Repository Layer    |  (CommodityRepository, AuthRepository)
        |  - Abstracts Data Sources|
        |  - Single Source of Truth|
        |  - Interacts with Firebase|
        +-----------+-------------+
                    | (Data Operations)
        +-----------v-------------+
        |     Firebase Backend    |
        |  - Firebase Authentication (User Auth)
        |  - Firebase Firestore    (Commodity Data)
        +-------------------------+


5.2. Layer Breakdown

UI Layer (View):

Technology: Jetpack Compose.

Responsibilities: Renders the user interface based on state provided by the ViewModel. Captures user input and forwards it to the ViewModel. Observes LiveData/StateFlow from ViewModels for UI updates.

Components: LoginScreen.kt, HomeScreen.kt, DetailScreen.kt, reusable Composable functions.

ViewModel Layer:

Technology: AndroidX ViewModel, Kotlin Coroutines, StateFlow/SharedFlow.

Responsibilities: Holds and manages UI-related data in a lifecycle-conscious way. Exposes data to the UI Layer via observable streams. Contains the business logic for user interactions and prepares data for display. Communicates with the Repository Layer.

Components: AuthViewModel.kt, HomeViewModel.kt, DetailViewModel.kt.

Repository Layer:

Technology: Kotlin Coroutines.

Responsibilities: Mediates between different data sources (in this MVP, primarily Firebase). Abstracts the data source details from the ViewModels. Provides a clean API for data access.

Components: AuthRepository.kt, CommodityRepository.kt (and their implementations).

Data Source / Backend:

Technology: Firebase Authentication, Firebase Firestore.

Responsibilities: Handles user authentication and stores/manages persistent commodity price data.

5.3. Key Technologies

Language: Kotlin

UI Framework: Jetpack Compose

State Management: ViewModel with Kotlin Flows (StateFlow)

Architecture: MVVM

Authentication & DB Backend: Firebase Authentication, Firebase Firestore

IDE: Android Studio

Data Format for Initial Uploads: JSON

5.4. Firebase Integration Details

Authentication:

Utilizes Firebase Email/Password authentication.

Manages user sessions and provides secure login.

Firestore Database:

commodities collection stores individual commodity documents.

Each commodity document includes name, imageUrl, and a nested prices map.

The prices map keys are district names (e.g., "Kampala", "Arua"), and values are maps containing fgp and mp.

Security rules are configured to allow read access for authenticated users to the commodities collection.

6. Data Model (Firestore)

Collection: commodities

Document ID: Unique identifier for the commodity (e.g., beans_nambale, or auto-generated).

Fields:

name (String): e.g., "Beans (Kg) Nambale"

imageUrl (String): URL pointing to the commodity image.

prices (Map):

Key (String): District Name (e.g., "Kampala")

Value (Map):

fgp (Number): Farm Gate Price.

mp (Number): Market Price.


7. MVP Limitations

As an MVP, the project has inherent limitations:

No Admin Interface: Data entry and updates to Firebase Firestore must be done manually through the Firebase console or via external scripts.

No Offline Support: The app requires an active internet connection to fetch and display data.

Limited Scalability for Data Input: Manual data input is not scalable for a larger number of commodities or more frequent updates.

No User Registration UI: Assumes users are pre-registered or Firebase handles new user creation implicitly on first login attempt (if configured).

No Historical Data: The app only shows current prices, not trends over time.

Single Language: English only, no localization.

Basic Error Handling: Error messages are functional but may not cover all edge cases exhaustively.

8. Future Considerations & Potential Enhancements

While outside the MVP scope, future iterations could include:

Admin Dashboard: A web-based interface for easier data management.

Offline Caching: Allowing users to view previously fetched data without an internet connection.

User Registration & Profile Management:

Historical Price Data & Charts:

Advanced Search & Filtering: By commodity, district, price range.

Push Notifications/SMS Alerts: For significant price changes.

Multi-language Support:

Community Features: Farmer forums, direct trader-farmer connections.

Integration with Other Agricultural APIs: Weather data, pest alerts.

9. Conclusion

The AgriMarket Uganda MVP aims to deliver a focused, valuable tool for the Ugandan agricultural community. By providing accessible and transparent commodity price information through a well-designed Android application leveraging Firebase, it lays the groundwork for a more robust platform that can significantly improve market efficiency and farmer livelihoods. The successful development of this MVP will validate the core concept and provide a solid foundation for future enhancements.




